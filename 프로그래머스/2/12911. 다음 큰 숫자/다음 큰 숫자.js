function solution(n) {
    var answer = n;
    let c = n;
    let c0 = 0;  // 0의 개수 (오른쪽에서부터)
    let c1 = 0;  // 1의 개수

    // 1. 오른쪽에서부터 0이 아닌 부분까지 0 개수 세기
    while ((c & 1) === 0 && c !== 0) {
        c0++;
        c >>= 1;
    }

    // 2. 1 개수 세기
    while ((c & 1) === 1) {
        c1++;
        c >>= 1;
    }

    // 예외 처리: 111...000 이면 다음 숫자가 없음
    // if (c0 + c1 === 31 || c0 + c1 === 0) return -1;

    // 3. 다음 수 계산
    let p = c0 + c1;             // 바꿀 위치
    answer |= (1 << p);               // p번째 비트를 1로 만든다
    answer &= ~((1 << p) - 1);        // p보다 오른쪽 비트를 모두 0으로 만든다
    answer |= (1 << (c1 - 1)) - 1;    // 오른쪽 끝에 c1-1개의 1을 붙인다
    return answer;
}